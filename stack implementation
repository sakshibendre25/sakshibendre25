//stack implementation using Arraylist

import java.util.Arraylist;
public class StackArrayList  {
  static class Stack  {
   Arraylist<Integer> list = new Arraylist<>();
   
    //push
    public void push(int data)  {
           list.add(data);
      }

      public boolean isEmpty() {
      return list.size() == 0;
  }


      // pop
      public  int pop() {
           if(isEmpty()) {
           return -1;
        }
        int top = list.remove(list.size()-1);
        return top;
    }

        //peek
        public  int peek() {
             if(isEmpty()) {
                 return -1;
              }
               return list.get(list.size()-1);
               }
            }

            public static void main(String args[] ) {
                 Stack s = new Stack();
                 s.push(1);
                 s.push(2);
                 s.push(3);
                 s.push(4);
                 s.push(5);
                 s.push(6);
                 s.push(7);
                 s.push(8);
                 s.push(9);
                 s.push(10);

                 while(!s.isEmpty()) {
                   System.out.println(s.peek());
                   s.pop();
                  }
              }
          }






  //stack implementation using Linked List       
public class StackDS {
    private static class Node {
        int data;
        Node next;

        Node(int data) {
            this.data = data;
            next = null;
        }
    }

    static class Stack {
        public static Node head = null;
        public static void push(int data) {
            Node newNode = new Node(data);

            if(head == null) {
                head = newNode;
                return;
            }
            newNode.next = head;
            head = newNode;
        }

        public static boolean isEmpty() {
            return head == null;
        }

        public static int pop() {
            if(isEmpty()) {
                return -1;
            }
            Node top = head;
            head = head.next;
            return top.data;
        }

        public static int peek() {
            if(isEmpty()) {
                return -1;
            }
            Node top = head;
            return top.data;
        }
    }

    public static void main(String args[]) {
        Stack s = new Stack();
        s.push(1);
        s.push(2);
        s.push(3);
        s.push(4);
         s.push(5);
         s.push(6);
         s.push(7);
         s.push(8);
         s.push(9);
         s.push(10);

        while(!s.isEmpty()) {
            System.out.println(s.peek());
            s.pop();
        }
    }
}
                   
                     
                    
                 
                
            
